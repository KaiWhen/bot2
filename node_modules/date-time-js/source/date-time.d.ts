export declare class DateTime {
    private static cultures;
    private static daysPerMonth;
    private _date;
    private _offset;
    private _isDateTime;
    private static isInteger(value);
    private static isMatch(date, substring);
    private static getTotalDate(year, month, day, hours?, minutes?, seconds?, milliseconds?, offset?);
    private static getDayAndMonth(day, month, culture);
    private static formatNumber(value, length);
    private static isValidTimeZoneOffset(offset);
    private static formatTimeZone(offset);
    static parse(value: DateTime | Date | string, culture?: string): DateTime;
    static format(date: any, ...parameters: any[]): string;
    static parseTimeZone(timeZone: number | string): number;
    static isDate(value: any): boolean;
    static isDateTime(value: any): boolean;
    static createEmpty(): DateTime;
    /**
     * Creates an instance of DateTime.
     *
     * @memberOf DateTime
     */
    constructor();
    /**
     * Creates an instance of DateTime.
     * @param {(string | Date | DateTime)} date String value representing a date, or Date object, or DateTime object.
     *
     * @memberOf DateTime
     */
    constructor(date: string | Date | DateTime);
    /**
     * Creates an instance of DateTime.
     * @param {(string | Date | DateTime)} date String value representing a date, or Date object, or DateTime object.
     * @param {string} culture The culture of the date. E.g. 'en-GB' or 'ru-RU'.
     *
     * @memberOf DateTime
     */
    constructor(date: string | Date | DateTime, culture: string);
    /**
     * Creates an instance of DateTime.
     * @param {number} year A number representing the year.
     *
     * @memberOf DateTime
     */
    constructor(year: number);
    /**
     * Creates an instance of DateTime.
     * @param {number} year A number representing the year.
     * @param {number} month A number between 0 and 11, representing the month. 0 corresponds to January, 1 to February, and so on.
     *
     * @memberOf DateTime
     */
    constructor(year: number, month: number);
    /**
     * Creates an instance of DateTime.
     * @param {number} year A number representing the year.
     * @param {number} month A number between 0 and 11, representing the month. 0 corresponds to January, 1 to February, and so on.
     * @param {number} date A number representing the day of the month.
     *
     * @memberOf DateTime
     */
    constructor(year: number, month: number, date: number);
    /**
     * Creates an instance of DateTime.
     * @param {number} year A number representing the year.
     * @param {number} month A number between 0 and 11, representing the month. 0 corresponds to January, 1 to February, and so on.
     * @param {number} date A number representing the day of the month.
     * @param {number} hour A number between 0 and 23, representing the hours.
     *
     * @memberOf DateTime
     */
    constructor(year: number, month: number, date: number, hour: number);
    /**
     * Creates an instance of DateTime.
     * @param {number} year A number representing the year.
     * @param {number} month A number between 0 and 11, representing the month. 0 corresponds to January, 1 to February, and so on.
     * @param {number} date A number representing the day of the month.
     * @param {number} hour A number between 0 and 23, representing the hours.
     * @param {number} minute A number between 0 and 59, representing the minutes.
     *
     * @memberOf DateTime
     */
    constructor(year: number, month: number, date: number, hour: number, minute: number);
    /**
     * Creates an instance of DateTime.
     * @param {number} year A number representing the year.
     * @param {number} month A number between 0 and 11, representing the month. 0 corresponds to January, 1 to February, and so on.
     * @param {number} date A number representing the day of the month.
     * @param {number} hour A number between 0 and 23, representing the hours.
     * @param {number} minute A number between 0 and 59, representing the minutes.
     * @param {number} second A number between 0 and 59, representing the seconds.
     *
     * @memberOf DateTime
     */
    constructor(year: number, month: number, date: number, hour: number, minute: number, second: number);
    /**
     * Creates an instance of DateTime.
     * @param {number} year A number representing the year.
     * @param {number} month A number between 0 and 11, representing the month. 0 corresponds to January, 1 to February, and so on.
     * @param {number} date A number representing the day of the month.
     * @param {number} hour A number between 0 and 23, representing the hours.
     * @param {number} minute A number between 0 and 59, representing the minutes.
     * @param {number} second A number between 0 and 59, representing the seconds.
     * @param {number} millisecond A number between 0 and 999, representing the milliseconds.
     *
     * @memberOf DateTime
     */
    constructor(year: number, month: number, date: number, hour: number, minute: number, second: number, millisecond: number);
    /**
     * Copies the date.
     *
     * @returns {DateTime}
     *
     * @memberOf DateTime
     */
    copy(): DateTime;
    toDate(): Date;
    /**
     * Gets the UTC offset of the date.
     *
     * @returns {number}
     *
     * @memberOf DateTime
     */
    offset(): number;
    /**
     * Sets the UTC offset of the date. Does not change the time of the date.
     *
     * @param {number | string} offset A number between -720 and 840, or a string representing the offset. The string can be in one of the following formats 'Z', '00:00', '-00:00', '+00:00', '01:30', '-01:30', '+01:30', 'GMTZ', 'GMT+01:30', 'GMT-01:30'.
     * @returns {DateTime} The current DateTime instance.
     *
     * @memberOf DateTime
     */
    offset(offset: number | string): DateTime;
    toUtc(): DateTime;
    isEmpty(): boolean;
    isUtc(): boolean;
    isEqual(date: DateTime | Date | string): boolean;
    isLess(date: DateTime | Date | string): boolean;
    isLessOrEqual(date: DateTime | Date | string): boolean;
    isGreater(date: DateTime | Date | string): boolean;
    isGreaterOrEqual(date: DateTime | Date | string): boolean;
    isBetween(startDate: DateTime | Date | string, endDate: DateTime | Date | string, isInclusive?: boolean): boolean;
    difference(date: DateTime | Date | string): number;
    valueOf(): number;
    format(format?: string): string;
    /**
     * Adds time to the date. If a unit of time is 'offset' then the method adds an offset to the date after converting it to minutes (it does not change the offset of the date).
     *
     * @param {number | string} value An amount of time. A unit of time representing the offset ('offset') can be a number between -720 and 840, or a string. The string can be in one of the following formats 'Z', '00:00', '-00:00', '+00:00', '01:30', '-01:30', '+01:30', 'GMTZ', 'GMT+01:30', 'GMT-01:30'.
     * @param {string} unit A unit of time ('year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond', 'offset').
     * @returns {DateTime} The current DateTime instance.
     *
     * @memberOf DateTime
     */
    add(value: number | string, unit: string): DateTime;
    /**
     * Subtracts time from the date.
     *
     * @param {number} value An amount of time.
     * @param {string} unit A unit of time ('year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond').
     * @returns {DateTime} The current DateTime instance.
     *
     * @memberOf DateTime
     */
    subtract(value: number, unit: string): DateTime;
    /**
     * Gets the milliseconds of the date.
     *
     * @returns {number}
     *
     * @memberOf DateTime
     */
    millisecond(): number;
    /**
     * Sets the milliseconds of the date.
     *
     * @param {number} millisecond A number between 0 and 999, representing the milliseconds. If a specified number is outside the expected range, the date information is updated accordingly. For example, if number of milliseconds is 1005, the number of seconds is incremented by 1, and 5 is used for the milliseconds.
     * @returns {DateTime} The current DateTime instance.
     *
     * @memberOf DateTime
     */
    millisecond(millisecond: number): DateTime;
    /**
     * Gets the seconds of the date.
     *
     * @returns {number}
     *
     * @memberOf DateTime
     */
    second(): number;
    /**
     * Sets the seconds of the date.
     *
     * @param {number} second A number between 0 and 59, representing the seconds. If a specified number is outside the expected range, the date information is updated accordingly. For example, if number of seconds is 100, the number of minutes is incremented by 1, and 40 is used for the seconds.
     * @returns {DateTime} The current DateTime instance.
     *
     * @memberOf DateTime
     */
    second(second: number): DateTime;
    /**
     * Gets the minutes of the date.
     *
     * @returns {number}
     *
     * @memberOf DateTime
     */
    minute(): number;
    /**
     * Sets the minutes of the date.
     *
     * @param {number} minute A number between 0 and 59, representing the minutes. If a specified number is outside the expected range, the date information is updated accordingly. For example, if number of minutes is 100, the number of hours is incremented by 1, and 40 is used for the minutes.
     * @returns {DateTime} The current DateTime instance.
     *
     * @memberOf DateTime
     */
    minute(minute: number): DateTime;
    /**
     * Gets the hours of the date.
     *
     * @returns {number}
     *
     * @memberOf DateTime
     */
    hour(): number;
    /**
     * Sets the hours of the date.
     *
     * @param {number} hour A number between 0 and 23, representing the hours. If a specified number is outside the expected range, the date information is updated accordingly. For example, if number of hours is 30, the day of month is incremented by 1, and 6 is used for the hours.
     * @returns {DateTime} The current DateTime instance.
     *
     * @memberOf DateTime
     */
    hour(hour: number): DateTime;
    /**
     * Gets the day of the month of the date.
     *
     * @returns {number}
     *
     * @memberOf DateTime
     */
    date(): number;
    /**
     * Sets the day of the month of the date.
     *
     * @param {number} date A number representing the day of the month. If a specified number is outside of the range of date values for the month, the date information is updated accordingly. For example, if the day of the month is 0, the date is set to the last day of the previous month.
     * @returns {DateTime} The current DateTime instance.
     *
     * @memberOf DateTime
     */
    date(date: number): DateTime;
    /**
     * Gets the month of the date.
     *
     * @returns {number}
     *
     * @memberOf DateTime
     */
    month(): number;
    /**
     * Sets the month of the date.
     *
     * @param {number} month A number between 0 and 11, representing the month. 0 corresponds to January, 1 to February, and so on. If a specified number is outside the expected range, the date information is updated accordingly. For example, if the month is 15, the year is incremented by 1, and 3 is used for the month.
     * @returns {DateTime} The current DateTime instance.
     *
     * @memberOf DateTime
     */
    month(month: number): DateTime;
    /**
     * Gets the year of the date.
     *
     * @returns {number}
     *
     * @memberOf DateTime
     */
    year(): number;
    /**
     * Sets the year of the date.
     *
     * @param {number} year A number representing the year.
     * @returns {DateTime} The current DateTime instance.
     *
     * @memberOf DateTime
     */
    year(year: number): DateTime;
    startOf(unit: string): DateTime;
    endOf(unit: string): DateTime;
}
